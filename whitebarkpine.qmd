---
title: "whitebarkpine_esa"
format: html
editor: visual
---

# Exploring whitebark pine in FIA

```{r}
#| echo: TRUE
#| message: FALSE
#| warning: FALSE


library(dplyr)
library(ggplot2)
library(readr)
library(tigris)
library(leaflet)
library(sf)
library(basemaps)
library(ggspatial)  
library(grid)    
library(patchwork)


theme_set(theme_bw())



```

# Whitebark pine for Montana, Idaho, and Wyoming

SPCD = 101 STATECD = 16, 30, 56

```{r}

whitebarkpine_all <- read_csv("data_processed/whitebark_pine.csv")



whitebarkpine_all$PLT_CN <- as.character(whitebarkpine_all$PLT_CN)
whitebarkpine_all$TREE_CN <- as.character(whitebarkpine_all$TREE_CN)
whitebarkpine_all$COND_CN <- as.character(whitebarkpine_all$COND_CN)
whitebarkpine_all$PREV_TRE_CN <- as.character(whitebarkpine_all$PREV_TRE_CN)

length(unique(whitebarkpine_all$TREE_COMPOSITE_ID))

knitr::kable(head(whitebarkpine_all))


```

**We have a total of 20,038 identified whitebark pine trees from the annual inventory period from MT, ID, WY**

## How many trees have been surveyed how many times in each state?

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE

whitebark_pine_measures <- whitebarkpine_all |> 
  group_by(STATECD, TREE_COMPOSITE_ID) |>
  summarize(n = length(unique(INVYR))) 


knitr::kable(whitebark_pine_measures |>
               group_by(STATECD, n) |>
               tally() |>
               rename(n_measures = n,
                      n_trees = nn))


```

**Notably, zero trees in Wyoming (STATECD = 56) have been surveyed more than one time.**

## Filter dataframe to only include remeasured plots so we can look at mortality

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE


whitebark_pine_repeats <- filter(whitebark_pine_measures, n > 1) |>
  left_join(whitebarkpine_all)


whitebark_pine_repeats <- whitebark_pine_repeats %>% 
  relocate(STATECD, TPA_UNADJ, TREE_COMPOSITE_ID, INVYR, CYCLE, MEASYEAR, STATUSCD, DIA)

length(unique(whitebark_pine_repeats$TREE_COMPOSITE_ID)) #8147 whitebark pine trees remeasured from annual inventory



```

This filters our search down to 8,147 trees that can be tracked from the annual inventory period through time (check back in on this when FIAdb has been updated - most recent update occurred June 28th, 2024 - talk to Renata about updating the database)

# Identify the trees that were alive at one point and then died (this does not include the expansion factor)

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE

length(whitebark_pine_repeats$TREE_COMPOSITE_ID)

#filter out dead trees in new df
dead_trees <- whitebark_pine_repeats %>%
  group_by(TREE_COMPOSITE_ID) %>%
  filter(any(STATUSCD == 2) & any(STATUSCD == 1)) %>%
  ungroup()

#get the DIA values when trees were alive so we can plot death as a function of the state variable (size)
alive_dia <- dead_trees %>%
  filter(STATUSCD == 1) %>%
  select(TREE_COMPOSITE_ID, DIA, AGENTCD) 


#contribution by renata, adding all function to get all trees alive through time
fully_survived_trees <- whitebark_pine_repeats |>
  group_by(TREE_COMPOSITE_ID) |>
  filter(all(STATUSCD == 1)) |>
  ungroup()

length(unique(alive_dia$TREE_COMPOSITE_ID)) # 1,904 trees died
length(unique(fully_survived_trees$TREE_COMPOSITE_ID)) # 2767 trees survived



mortality_labels <- c(
  "10" = "Insect",
  "20" = "Disease",
  "30" = "Fire",
  "40" = "Animal",
  "50" = "Weather",
  "60" = "Vegetation",
  "70" = "Unknown",
  "NA" = "NA"
)

# Get the agent codes for dead trees
agent_codes <- dead_trees %>%
  filter(STATUSCD == 2) %>%
  select(TREE_COMPOSITE_ID, AGENTCD) %>%
  distinct()

# Join agent codes back to alive_dia_corrected
alive_dia <- alive_dia %>%
  left_join(agent_codes, by = "TREE_COMPOSITE_ID", suffix = c("", ".dead"))

alive_dia_corrected$MortalityAgent <- factor(as.character(alive_dia_corrected$AGENTCD.dead), levels = names(mortality_labels), labels = mortality_labels)

# Categorize mortality agents
alive_dia <- alive_dia %>%
  mutate(MortalityCategory = case_when(
    AGENTCD.dead == 10 ~ "Insect",
    AGENTCD.dead == 20 ~ "Disease",
    AGENTCD.dead %in% c(30) ~ "Fire",
    !is.na(AGENTCD.dead) ~ "NA",
    TRUE ~ "NA"
  ))
# we have 2027 trees that died

alive_dia_unique <- alive_dia %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE)

mort_by_size <- ggplot(alive_dia_unique <- alive_dia %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE), aes(x = DIA, fill = MortalityCategory)) +
  geom_histogram(binwidth = 1, color = "white", alpha = 0.75, position = "stack") +
  labs(title = "Whitebark Pine Mortality by size and mortality causing agent (2003-2019)",
       x = "Diameter (in.)",
       y = "",
       fill = "Mortality Agent") +
  scale_fill_manual(values = c("Insect" = "black", "Disease" = "darkorange", "Fire" = "darkred", "NA" = "darkblue")) +
  theme_bw() +
   theme(
    axis.title = element_text(size = 20),
    axis.text = element_text(size = 17), 
    legend.title = element_text(size = 20),      # Increase legend title size
    legend.text = element_text(size = 17),       # Increase legend text size
    legend.key.size = unit(1.5, "lines")   
  ) +
  xlim(0, 20)

##need to incorporate expansion factor

```

So 1,904 whitebark pine trees that were alive had died from the annual inventory cycle from MT and ID (note - does not include Wyoming)

Mean DIA of dead trees is 8.922 in Mean DIA of all the trees is 8.767 in The mean for value for the trees that died is higher than the mean value for all the trees pooled that lived and died

Need to include expansion factor for trees on microplots to scale up to the plot level

## Identify the trees that were alive at one point and then died accounting for the expansion factor this time for saplings on a microplot, where TPA_UNADJ = 74.965282

```{r}
whitebark_pine_microplot <- whitebark_pine_repeats %>% 
  filter((TPA_UNADJ == 74.965282) | 
   (is.na(TPA_UNADJ) & (lag(TPA_UNADJ) == 74.965282 | lead(TPA_UNADJ) == 74.965282))
  ) 

#okay now add the expansion factor to scale microplot trees up to the subplot level so we can compare total number of tree morality

whitebark_pine_microplot <- whitebark_pine_microplot %>%
  mutate(microplot_corrected = 1 * 12.4567479)

whitebark_pine_repeats <- whitebark_pine_repeats %>%
  left_join(select(whitebark_pine_microplot, TREE_COMPOSITE_ID, microplot_corrected), by = "TREE_COMPOSITE_ID")

str(whitebark_pine_repeats)
  
# do same steps as previous to plot the adjusted  mortality
dead_trees_corrected <- whitebark_pine_repeats %>%
  group_by(TREE_COMPOSITE_ID) %>%
  filter(any(STATUSCD == 2) & any(STATUSCD == 1)) %>%
  ungroup()

length(unique(dead_trees_corrected$TREE_COMPOSITE_ID))

alive_dia_corrected <- dead_trees_corrected %>%
  filter(STATUSCD == 1) %>%
  select(TREE_COMPOSITE_ID, DIA, microplot_corrected, AGENTCD) %>%
  mutate(weight = if_else(is.na(microplot_corrected), 1, microplot_corrected))

survived_trees_corrected <- whitebark_pine_repeats %>%
  group_by(TREE_COMPOSITE_ID) |>
  filter(all(STATUSCD == 1)) |>
  ungroup() %>% 
  select(TREE_COMPOSITE_ID, DIA, microplot_corrected) %>%
  mutate(weight = if_else(is.na(microplot_corrected), 1, microplot_corrected))

# Calculate mean DIA
mean_dia_all <- mean(whitebark_pine_repeats$DIA, na.rm = TRUE)
mean_dead_trees <- mean(alive_dia_corrected$DIA, na.rm = TRUE)

#plot percentages of morality on histogram
survived_trees_corrected_unique <- survived_trees_corrected %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE) #4960 trees

alive_trees_corrected_unique <- alive_dia_corrected %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE) #1904 trees

combined_data <- bind_rows(
  survived_trees_corrected_unique %>% mutate(TreeStatus = "Survived"),
  alive_trees_corrected_unique %>% mutate(TreeStatus = "Died")
) %>%
  mutate(TreeStatus = factor(TreeStatus, levels = c("Survived", "Died"))) # Ensuring "Survived" is first

# Plot histogram 
mortality_hist <-ggplot(combined_data, aes(x = DIA, weight = weight, fill = TreeStatus)) +
  geom_histogram(binwidth = 1.3, color = "white", alpha = 0.75, position = position_dodge(0.7)) + 
  labs(title = "Whitebark Pine Mortality and Survival of remeasured trees from 2003-2019 in the interior west",
       x = "Diameter (in.)",
       y = "Number of Trees", 
       fill = "Tree Status") +
  theme_bw() + 
  theme(
    axis.title = element_text(size = 20),
    axis.text = element_text(size = 17), 
    legend.title = element_text(size = 20),
    legend.text = element_text(size = 17),       
    legend.key.size = unit(1.5, "lines")   
  ) +
  scale_fill_manual(values = c("Died" = "#006699", "Survived" = "#9999FF")) + 
  xlim(0, 20)

ggsave("mortality_hist.png", mortality_hist, width = 10, height = 6)


mortality_labels <- c(
  "10" = "Insect",
  "20" = "Disease",
  "30" = "Fire",
  "40" = "Animal",
  "50" = "Weather",
  "60" = "Vegetation",
  "70" = "Unknown",
  "NA" = "NA"
)

# Get the agent codes for dead trees
agent_codes <- dead_trees_corrected %>%
  filter(STATUSCD == 2) %>%
  select(TREE_COMPOSITE_ID, AGENTCD) %>%
  distinct()

# Join agent codes back to alive_dia_corrected
alive_dia_corrected <- alive_dia_corrected %>%
  left_join(agent_codes, by = "TREE_COMPOSITE_ID", suffix = c("", ".dead"))

alive_dia_corrected$MortalityAgent <- factor(as.character(alive_dia_corrected$AGENTCD.dead), levels = names(mortality_labels), labels = mortality_labels)

# Categorize mortality agents
alive_dia_corrected <- alive_dia_corrected %>%
  mutate(MortalityCategory = case_when(
    AGENTCD.dead == 10 ~ "Insect",
    AGENTCD.dead == 20 ~ "Disease",
    AGENTCD.dead %in% c(30) ~ "Fire",
    !is.na(AGENTCD.dead) ~ "NA",
    TRUE ~ "NA"
  ))
# we have 2027 trees that died

alive_dia_corrected_unique <- alive_dia_corrected %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE)

mort_by_size <- ggplot(alive_dia_corrected_unique <- alive_dia_corrected %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE), aes(x = DIA, weight = weight, fill = MortalityCategory)) +
  geom_histogram(binwidth = 1, color = "white", alpha = 0.75, position = "stack") +
  labs(title = "Whitebark Pine Mortality by size and mortality causing agent (2003-2019)",
       x = "Diameter (in.)",
       y = "",
       fill = "Mortality Agent") +
  scale_fill_manual(values = c("Insect" = "black", "Disease" = "darkorange", "Fire" = "darkred", "NA" = "darkblue")) +
  theme_bw() +
   theme(
    axis.title = element_text(size = 20),
    axis.text = element_text(size = 17), 
    legend.title = element_text(size = 20),      # Increase legend title size
    legend.text = element_text(size = 17),       # Increase legend text size
    legend.key.size = unit(1.5, "lines")   
  ) +
  xlim(0, 20)


alive_dia_corrected_unique

print(unique(alive_dia_corrected$AGENTCD.dead)) # # 10, 20, 30, 40, 50, 60, 70 

combined_plot <- mortality_hist + mort_by_size + plot_layout(ncol = 2)

# now summaize how many individuals in each cateogry of mortality class died

mortality_summary <- alive_dia_corrected_unique %>%
  group_by(MortalityCategory) %>%
  summarise(TotalWeight = sum(weight))

ggsave("mortality_by_size.png", combined_plot, width = 10, height = 6)

# Count the number of NA values in the AGENTCD.dead column

##okay this table is adjusted for saplings on the microplot
```

Calculate percentage of trees dead by certain agent

```{r}


mortality_summary <- alive_dia_corrected_unique %>%
  group_by(MortalityCategory) %>%
  summarise(total_weight = sum(weight, na.rm = TRUE))

total_weight_all <- sum(mortality_summary$total_weight, na.rm = TRUE)

mortality_summary <- mortality_summary %>%
  mutate(percentage = (total_weight / total_weight_all) * 100)

print(mortality_summary)

mort_table <- mortality_summary %>%
  select(-total_weight) %>%  # Exclude total_weight column
  gt() %>%
  fmt_number(
    columns = vars(percentage),
    decimals = 2
  ) %>%
  cols_label(
    MortalityCategory = "Mortality Agent",
    percentage = "Percentage"
  ) %>%
  tab_header(
    title = md("**Summary of FIADB wbp mortality**")
  )


```

Let's take a look at the agentCDs, which are the mortality causing agents for dead trees

```{r}

#| echo: FALSE
#| message: FALSE
#| warning: FALSE


whitebark_pine_agentcd <- whitebark_pine_repeats %>%
  filter(STATUSCD == 2)

whitebark_pine_agentcd_unique <- whitebark_pine_agentcd %>%
  distinct(TREE_COMPOSITE_ID, .keep_all = TRUE)


print(unique(whitebark_pine_agentcd$AGENTCD)) # 10, 20, 30, 40, 50, 60, 70
print(length(unique(whitebark_pine_agentcd$TREE_COMPOSITE_ID))) #5091 trees 


# what is this doing, 
whitebark_pine_agentcd_unique <- whitebark_pine_agentcd %>%
  group_by(TREE_COMPOSITE_ID) %>%
  arrange(TREE_COMPOSITE_ID, INVYR) %>%
  slice(1) %>%
  ungroup()

whitebark_pine_agentcd_unique$AGENTCD <- factor(whitebark_pine_agentcd_unique$AGENTCD, exclude = NULL)

mortality_labels <- c(
  "10" = "Insect",
  "20" = "Disease",
  "30" = "Fire",
  "40" = "Animal",
  "50" = "Weather",
  "60" = "Vegetation",
  "70" = "Unknown",
  "NA" = "NA"
)

whitebark_pine_agentcd_unique$AGENTCD <- as.character(whitebark_pine_agentcd_unique$AGENTCD)


# Create a bar plot showing the frequency distribution of AGENTCD
agent_hist <- ggplot(data = whitebark_pine_agentcd_unique, aes(x =  as.factor(AGENTCD), fill = AGENTCD)) +
  geom_bar() +
  geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
  labs(title = "Mortality Causing Agents of Whitebark Pine",
       x = "Mortality Agent",
       y = "Frequency") +
  scale_x_discrete(labels = mortality_labels) +
  scale_fill_manual(values = c("10" = "black",
                               "20" = "darkorange",
                               "30" = "darkred",
                               "40" = "brown",
                               "50" = "darkblue",
                               "60" = "darkgreen",
                               "70" = "purple4",
                               "NA" = "gray")) +
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  ylim(0, 2800)

ggsave("agentcd_hist.png", agent_hist, width = 10, height = 6)


```

Now add condition level disturbance codes to the mix

```{r}

#| echo: FALSE
#| message: FALSE
#| warning: FALSE

whitebark_pine_agentcd_unique$DSTRBCD1 <- as.factor(whitebark_pine_agentcd_unique$DSTRBCD1)
whitebark_pine_agentcd_unique$DSTRBCD2 <- as.factor(whitebark_pine_agentcd_unique$DSTRBCD2)
whitebark_pine_agentcd_unique$DSTRBCD3 <- as.factor(whitebark_pine_agentcd_unique$DSTRBCD3)

print(unique(whitebark_pine_agentcd$DSTRBCD1)) # 0, 21, 22, 12, 31, 30, 32, 20, 95, 50, 10, 46, 92, 60, 52

# Define the disturbance code labels
disturbance_labels <- c(
  "0" = "No visible disturbance",
  "10" = "Insect damage",
  "12" = "Insect damage to trees, including seedlings and saplings",
  "20" = "Disease damage",
  "21" = "Disease damage to understory vegetation",
  "22" = "Disease damage to trees, including seedlings and saplings",
  "30" = "Fire damage (from crown and ground fire, either prescribed or natural)",
  "31" = "Ground fire damage",
  "32" = "Crown fire damage",
  "40" = "Animal damage",
  "41" = "Beaver (includes flooding caused by beaver)",
  "42" = "Porcupine",
  "43" = "Deer/ungulate",
  "44" = "Bear",
  "45" = "Rabbit",
  "46" = "Domestic animal/livestock (includes grazing)",
  "50" = "Weather damage",
  "51" = "Ice",
  "52" = "Wind (includes hurricane, tornado)",
  "53" = "Flooding (weather induced)",
  "54" = "Drought",
  "60" = "Vegetation (suppression, competition, vines)",
  "70" = "Unknown / not sure / other",
  "80" = "Human-induced damage",
  "90" = "Geologic disturbances",
  "91" = "Landslide",
  "92" = "Avalanche track", 
  "NA" = "NA"
)

ggplot(data = whitebark_pine_agentcd_unique, aes(x = DSTRBCD1)) +
  geom_bar() +
  geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
  labs(title = "Disturbance Agents to the forest stand",
       x = "Disturbance Code",
       y = "Frequency") +
  scale_x_discrete(labels = disturbance_labels) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# pooling some of the forest disturbance agents 
whitebark_pine_agentcd_unique <- whitebark_pine_agentcd_unique %>%
  mutate(PooledCategory = case_when(
    DSTRBCD1 == 0  ~ "No visible damage",
    DSTRBCD1 %in% c("10", "12") ~ "Insect damage",
    DSTRBCD1 %in% c("20", "21", "22") ~ "Disease damage",
    DSTRBCD1 %in% c("30", "31", "32") ~ "Fire damage",
    DSTRBCD1 %in% c("46", "50", "52", "60", "92", "95") ~ "Other",
    TRUE ~ as.character(DSTRBCD1)  # Retain other codes as they are
  ))

whitebark_pine_agentcd_unique$PooledCategory <- factor(whitebark_pine_agentcd_unique$PooledCategory)

ggplot(data = whitebark_pine_agentcd_unique, aes(x = PooledCategory)) +
  geom_bar() +
  geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
  labs(title = "Distribution of Disturbance Codes",
       x = "Disturbance Category",
       y = "Frequency") +
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

# Make a joint plot with mortality and disturbance

```{r}
#  custom colors for the disturbance categories

custom_colors <- c(
  "Disease damage" = "darkorange",
  "Fire damage" = "darkred",
  "Insect damage" = "black",
  "No visible damage" = "darkblue",
  "Other" = "purple4"
)

# plot this histogram
dist_agent_hist <- ggplot(data = whitebark_pine_agentcd_unique, aes(x = AGENTCD, fill = PooledCategory)) +
  geom_bar(position = "dodge", color = "white") +
  labs(title = "Disturbance categories of whitebark pine by mortality agent",
       x = "Mortality Agent",
       y = "Number of trees",
       fill = "Disturbance Category") +
  scale_x_discrete(labels = mortality_labels) +
  scale_fill_manual(values = custom_colors) +
  theme_bw() + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


ggsave("dist_agent.png", dist_agent_hist, width = 10, height = 6)


```
